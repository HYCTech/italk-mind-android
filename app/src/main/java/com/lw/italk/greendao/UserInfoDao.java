package com.lw.italk.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lw.italk.greendao.model.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, String> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, String.class, "uid", true, "UID");
        public final static Property Token = new Property(1, String.class, "token", false, "TOKEN");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Sex = new Property(3, Long.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(4, Long.class, "birthday", false, "BIRTHDAY");
        public final static Property Allowtype = new Property(5, Long.class, "allowtype", false, "ALLOWTYPE");
        public final static Property CompanyId = new Property(6, String.class, "companyId", false, "COMPANY_ID");
        public final static Property CompanyName = new Property(7, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property IsFriend = new Property(8, Boolean.class, "isFriend", false, "IS_FRIEND");
        public final static Property Area = new Property(9, String.class, "area", false, "AREA");
        public final static Property Remarks = new Property(10, String.class, "remarks", false, "REMARKS");
        public final static Property Location = new Property(11, String.class, "location", false, "LOCATION");
        public final static Property Signature = new Property(12, String.class, "signature", false, "SIGNATURE");
        public final static Property Msgsettings = new Property(13, Boolean.class, "msgsettings", false, "MSGSETTINGS");
        public final static Property Lasttimelogin = new Property(14, Long.class, "lasttimelogin", false, "LASTTIMELOGIN");
        public final static Property Cellphone = new Property(15, String.class, "cellphone", false, "CELLPHONE");
        public final static Property Avatar = new Property(16, String.class, "avatar", false, "AVATAR");
        public final static Property Qrcode = new Property(17, String.class, "qrcode", false, "QRCODE");
        public final static Property Notifymsg = new Property(18, Boolean.class, "notifymsg", false, "NOTIFYMSG");
        public final static Property Notifydetail = new Property(19, Boolean.class, "notifydetail", false, "NOTIFYDETAIL");
        public final static Property Msgsound = new Property(20, Boolean.class, "msgsound", false, "MSGSOUND");
        public final static Property Msgshock = new Property(21, Boolean.class, "msgshock", false, "MSGSHOCK");
        public final static Property Recommendfriend = new Property(22, Boolean.class, "recommendfriend", false, "RECOMMENDFRIEND");
        public final static Property Freeze = new Property(23, Boolean.class, "freeze", false, "FREEZE");
        public final static Property Vip = new Property(24, Boolean.class, "vip", false, "VIP");
        public final static Property Iscurrent = new Property(25, Boolean.class, "iscurrent", false, "ISCURRENT");
        public final static Property Notifyvoice = new Property(26, Boolean.class, "notifyvoice", false, "NOTIFYVOICE");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"UID\" TEXT PRIMARY KEY NOT NULL ," + // 0: uid
                "\"TOKEN\" TEXT," + // 1: token
                "\"USERNAME\" TEXT," + // 2: username
                "\"SEX\" INTEGER," + // 3: sex
                "\"BIRTHDAY\" INTEGER," + // 4: birthday
                "\"ALLOWTYPE\" INTEGER," + // 5: allowtype
                "\"COMPANY_ID\" TEXT," + // 6: companyId
                "\"COMPANY_NAME\" TEXT," + // 7: companyName
                "\"IS_FRIEND\" INTEGER," + // 8: isFriend
                "\"AREA\" TEXT," + // 9: area
                "\"REMARKS\" TEXT," + // 10: remarks
                "\"LOCATION\" TEXT," + // 11: location
                "\"SIGNATURE\" TEXT," + // 12: signature
                "\"MSGSETTINGS\" INTEGER," + // 13: msgsettings
                "\"LASTTIMELOGIN\" INTEGER," + // 14: lasttimelogin
                "\"CELLPHONE\" TEXT," + // 15: cellphone
                "\"AVATAR\" TEXT," + // 16: avatar
                "\"QRCODE\" TEXT," + // 17: qrcode
                "\"NOTIFYMSG\" INTEGER," + // 18: notifymsg
                "\"NOTIFYDETAIL\" INTEGER," + // 19: notifydetail
                "\"MSGSOUND\" INTEGER," + // 20: msgsound
                "\"MSGSHOCK\" INTEGER," + // 21: msgshock
                "\"RECOMMENDFRIEND\" INTEGER," + // 22: recommendfriend
                "\"FREEZE\" INTEGER," + // 23: freeze
                "\"VIP\" INTEGER," + // 24: vip
                "\"ISCURRENT\" INTEGER," + // 25: iscurrent
                "\"NOTIFYVOICE\" INTEGER);"); // 26: notifyvoice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        Long sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(4, sex);
        }
 
        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(5, birthday);
        }
 
        Long allowtype = entity.getAllowtype();
        if (allowtype != null) {
            stmt.bindLong(6, allowtype);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(7, companyId);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(8, companyName);
        }
 
        Boolean isFriend = entity.getIsFriend();
        if (isFriend != null) {
            stmt.bindLong(9, isFriend ? 1L: 0L);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(10, area);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(11, remarks);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(12, location);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(13, signature);
        }
 
        Boolean msgsettings = entity.getMsgsettings();
        if (msgsettings != null) {
            stmt.bindLong(14, msgsettings ? 1L: 0L);
        }
 
        Long lasttimelogin = entity.getLasttimelogin();
        if (lasttimelogin != null) {
            stmt.bindLong(15, lasttimelogin);
        }
 
        String cellphone = entity.getCellphone();
        if (cellphone != null) {
            stmt.bindString(16, cellphone);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(17, avatar);
        }
 
        String qrcode = entity.getQrcode();
        if (qrcode != null) {
            stmt.bindString(18, qrcode);
        }
 
        Boolean notifymsg = entity.getNotifymsg();
        if (notifymsg != null) {
            stmt.bindLong(19, notifymsg ? 1L: 0L);
        }
 
        Boolean notifydetail = entity.getNotifydetail();
        if (notifydetail != null) {
            stmt.bindLong(20, notifydetail ? 1L: 0L);
        }
 
        Boolean msgsound = entity.getMsgsound();
        if (msgsound != null) {
            stmt.bindLong(21, msgsound ? 1L: 0L);
        }
 
        Boolean msgshock = entity.getMsgshock();
        if (msgshock != null) {
            stmt.bindLong(22, msgshock ? 1L: 0L);
        }
 
        Boolean recommendfriend = entity.getRecommendfriend();
        if (recommendfriend != null) {
            stmt.bindLong(23, recommendfriend ? 1L: 0L);
        }
 
        Boolean freeze = entity.getFreeze();
        if (freeze != null) {
            stmt.bindLong(24, freeze ? 1L: 0L);
        }
 
        Boolean vip = entity.getVip();
        if (vip != null) {
            stmt.bindLong(25, vip ? 1L: 0L);
        }
 
        Boolean iscurrent = entity.getIscurrent();
        if (iscurrent != null) {
            stmt.bindLong(26, iscurrent ? 1L: 0L);
        }
 
        Boolean notifyvoice = entity.getNotifyvoice();
        if (notifyvoice != null) {
            stmt.bindLong(27, notifyvoice ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        Long sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(4, sex);
        }
 
        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(5, birthday);
        }
 
        Long allowtype = entity.getAllowtype();
        if (allowtype != null) {
            stmt.bindLong(6, allowtype);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(7, companyId);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(8, companyName);
        }
 
        Boolean isFriend = entity.getIsFriend();
        if (isFriend != null) {
            stmt.bindLong(9, isFriend ? 1L: 0L);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(10, area);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(11, remarks);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(12, location);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(13, signature);
        }
 
        Boolean msgsettings = entity.getMsgsettings();
        if (msgsettings != null) {
            stmt.bindLong(14, msgsettings ? 1L: 0L);
        }
 
        Long lasttimelogin = entity.getLasttimelogin();
        if (lasttimelogin != null) {
            stmt.bindLong(15, lasttimelogin);
        }
 
        String cellphone = entity.getCellphone();
        if (cellphone != null) {
            stmt.bindString(16, cellphone);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(17, avatar);
        }
 
        String qrcode = entity.getQrcode();
        if (qrcode != null) {
            stmt.bindString(18, qrcode);
        }
 
        Boolean notifymsg = entity.getNotifymsg();
        if (notifymsg != null) {
            stmt.bindLong(19, notifymsg ? 1L: 0L);
        }
 
        Boolean notifydetail = entity.getNotifydetail();
        if (notifydetail != null) {
            stmt.bindLong(20, notifydetail ? 1L: 0L);
        }
 
        Boolean msgsound = entity.getMsgsound();
        if (msgsound != null) {
            stmt.bindLong(21, msgsound ? 1L: 0L);
        }
 
        Boolean msgshock = entity.getMsgshock();
        if (msgshock != null) {
            stmt.bindLong(22, msgshock ? 1L: 0L);
        }
 
        Boolean recommendfriend = entity.getRecommendfriend();
        if (recommendfriend != null) {
            stmt.bindLong(23, recommendfriend ? 1L: 0L);
        }
 
        Boolean freeze = entity.getFreeze();
        if (freeze != null) {
            stmt.bindLong(24, freeze ? 1L: 0L);
        }
 
        Boolean vip = entity.getVip();
        if (vip != null) {
            stmt.bindLong(25, vip ? 1L: 0L);
        }
 
        Boolean iscurrent = entity.getIscurrent();
        if (iscurrent != null) {
            stmt.bindLong(26, iscurrent ? 1L: 0L);
        }
 
        Boolean notifyvoice = entity.getNotifyvoice();
        if (notifyvoice != null) {
            stmt.bindLong(27, notifyvoice ? 1L: 0L);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // allowtype
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // companyId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // companyName
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isFriend
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // area
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // remarks
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // location
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // signature
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // msgsettings
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // lasttimelogin
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // cellphone
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // avatar
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // qrcode
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // notifymsg
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0, // notifydetail
            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0, // msgsound
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0, // msgshock
            cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0, // recommendfriend
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0, // freeze
            cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0, // vip
            cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0, // iscurrent
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0 // notifyvoice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setAllowtype(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setCompanyId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompanyName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsFriend(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setArea(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRemarks(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLocation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSignature(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMsgsettings(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setLasttimelogin(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setCellphone(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAvatar(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setQrcode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setNotifymsg(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setNotifydetail(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
        entity.setMsgsound(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
        entity.setMsgshock(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
        entity.setRecommendfriend(cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0);
        entity.setFreeze(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0);
        entity.setVip(cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0);
        entity.setIscurrent(cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0);
        entity.setNotifyvoice(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfo entity, long rowId) {
        return entity.getUid();
    }
    
    @Override
    public String getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
