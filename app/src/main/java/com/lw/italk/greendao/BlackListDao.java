package com.lw.italk.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lw.italk.greendao.model.BlackList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BLACK_LIST".
*/
public class BlackListDao extends AbstractDao<BlackList, String> {

    public static final String TABLENAME = "BLACK_LIST";

    /**
     * Properties of entity BlackList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Userid = new Property(0, String.class, "userid", true, "USERID");
        public final static Property Jid = new Property(1, String.class, "jid", false, "JID");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property Remarkname = new Property(3, String.class, "remarkname", false, "REMARKNAME");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
        public final static Property Timestamp = new Property(5, long.class, "timestamp", false, "TIMESTAMP");
    }


    public BlackListDao(DaoConfig config) {
        super(config);
    }
    
    public BlackListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BLACK_LIST\" (" + //
                "\"USERID\" TEXT PRIMARY KEY NOT NULL ," + // 0: userid
                "\"JID\" TEXT," + // 1: jid
                "\"NICKNAME\" TEXT," + // 2: nickname
                "\"REMARKNAME\" TEXT," + // 3: remarkname
                "\"IMAGE\" TEXT," + // 4: image
                "\"TIMESTAMP\" INTEGER NOT NULL );"); // 5: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BLACK_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BlackList entity) {
        stmt.clearBindings();
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(1, userid);
        }
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(2, jid);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String remarkname = entity.getRemarkname();
        if (remarkname != null) {
            stmt.bindString(4, remarkname);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
        stmt.bindLong(6, entity.getTimestamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BlackList entity) {
        stmt.clearBindings();
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(1, userid);
        }
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(2, jid);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String remarkname = entity.getRemarkname();
        if (remarkname != null) {
            stmt.bindString(4, remarkname);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
        stmt.bindLong(6, entity.getTimestamp());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BlackList readEntity(Cursor cursor, int offset) {
        BlackList entity = new BlackList( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // jid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remarkname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // image
            cursor.getLong(offset + 5) // timestamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BlackList entity, int offset) {
        entity.setUserid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setJid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemarkname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimestamp(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BlackList entity, long rowId) {
        return entity.getUserid();
    }
    
    @Override
    public String getKey(BlackList entity) {
        if(entity != null) {
            return entity.getUserid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BlackList entity) {
        return entity.getUserid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
