package com.lw.italk.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lw.italk.gson.msg.MsgItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG_ITEM".
*/
public class MsgItemDao extends AbstractDao<MsgItem, Long> {

    public static final String TABLENAME = "MSG_ITEM";

    /**
     * Properties of entity MsgItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Msgid = new Property(1, long.class, "msgid", false, "MSGID");
        public final static Property Localid = new Property(2, long.class, "localid", false, "LOCALID");
        public final static Property Userid = new Property(3, String.class, "userid", false, "USERID");
        public final static Property Fid = new Property(4, String.class, "fid", false, "FID");
        public final static Property Uid = new Property(5, String.class, "uid", false, "UID");
        public final static Property Chattype = new Property(6, int.class, "chattype", false, "CHATTYPE");
        public final static Property Bussinesstype = new Property(7, int.class, "bussinesstype", false, "BUSSINESSTYPE");
        public final static Property Timestamp = new Property(8, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Burn = new Property(9, boolean.class, "burn", false, "BURN");
        public final static Property Burnsecond = new Property(10, int.class, "burnsecond", false, "BURNSECOND");
        public final static Property Status = new Property(11, int.class, "status", false, "STATUS");
        public final static Property Text = new Property(12, String.class, "text", false, "TEXT");
        public final static Property Imageformat = new Property(13, int.class, "imageformat", false, "IMAGEFORMAT");
        public final static Property Width = new Property(14, int.class, "width", false, "WIDTH");
        public final static Property Height = new Property(15, int.class, "height", false, "HEIGHT");
        public final static Property Thumburl = new Property(16, String.class, "thumburl", false, "THUMBURL");
        public final static Property Localthumburl = new Property(17, String.class, "localthumburl", false, "LOCALTHUMBURL");
        public final static Property Localurl = new Property(18, String.class, "localurl", false, "LOCALURL");
        public final static Property Url = new Property(19, String.class, "url", false, "URL");
        public final static Property Second = new Property(20, int.class, "second", false, "SECOND");
        public final static Property Filename = new Property(21, String.class, "filename", false, "FILENAME");
        public final static Property Size = new Property(22, int.class, "size", false, "SIZE");
        public final static Property Desc = new Property(23, String.class, "desc", false, "DESC");
        public final static Property Latitude = new Property(24, String.class, "latitude", false, "LATITUDE");
        public final static Property Longtitude = new Property(25, String.class, "longtitude", false, "LONGTITUDE");
        public final static Property Unread = new Property(26, boolean.class, "unread", false, "UNREAD");
        public final static Property Isgroup = new Property(27, boolean.class, "isgroup", false, "ISGROUP");
        public final static Property Direct = new Property(28, int.class, "direct", false, "DIRECT");
        public final static Property Downid = new Property(29, long.class, "downid", false, "DOWNID");
        public final static Property Localpath = new Property(30, String.class, "localpath", false, "LOCALPATH");
        public final static Property Islisten = new Property(31, boolean.class, "islisten", false, "ISLISTEN");
        public final static Property OrderId = new Property(32, long.class, "orderId", false, "ORDER_ID");
    }


    public MsgItemDao(DaoConfig config) {
        super(config);
    }
    
    public MsgItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MSGID\" INTEGER NOT NULL ," + // 1: msgid
                "\"LOCALID\" INTEGER NOT NULL ," + // 2: localid
                "\"USERID\" TEXT," + // 3: userid
                "\"FID\" TEXT," + // 4: fid
                "\"UID\" TEXT," + // 5: uid
                "\"CHATTYPE\" INTEGER NOT NULL ," + // 6: chattype
                "\"BUSSINESSTYPE\" INTEGER NOT NULL ," + // 7: bussinesstype
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 8: timestamp
                "\"BURN\" INTEGER NOT NULL ," + // 9: burn
                "\"BURNSECOND\" INTEGER NOT NULL ," + // 10: burnsecond
                "\"STATUS\" INTEGER NOT NULL ," + // 11: status
                "\"TEXT\" TEXT," + // 12: text
                "\"IMAGEFORMAT\" INTEGER NOT NULL ," + // 13: imageformat
                "\"WIDTH\" INTEGER NOT NULL ," + // 14: width
                "\"HEIGHT\" INTEGER NOT NULL ," + // 15: height
                "\"THUMBURL\" TEXT," + // 16: thumburl
                "\"LOCALTHUMBURL\" TEXT," + // 17: localthumburl
                "\"LOCALURL\" TEXT," + // 18: localurl
                "\"URL\" TEXT," + // 19: url
                "\"SECOND\" INTEGER NOT NULL ," + // 20: second
                "\"FILENAME\" TEXT," + // 21: filename
                "\"SIZE\" INTEGER NOT NULL ," + // 22: size
                "\"DESC\" TEXT," + // 23: desc
                "\"LATITUDE\" TEXT," + // 24: latitude
                "\"LONGTITUDE\" TEXT," + // 25: longtitude
                "\"UNREAD\" INTEGER NOT NULL ," + // 26: unread
                "\"ISGROUP\" INTEGER NOT NULL ," + // 27: isgroup
                "\"DIRECT\" INTEGER NOT NULL ," + // 28: direct
                "\"DOWNID\" INTEGER NOT NULL ," + // 29: downid
                "\"LOCALPATH\" TEXT," + // 30: localpath
                "\"ISLISTEN\" INTEGER NOT NULL ," + // 31: islisten
                "\"ORDER_ID\" INTEGER NOT NULL );"); // 32: orderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MsgItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMsgid());
        stmt.bindLong(3, entity.getLocalid());
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(4, userid);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(5, fid);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(6, uid);
        }
        stmt.bindLong(7, entity.getChattype());
        stmt.bindLong(8, entity.getBussinesstype());
        stmt.bindLong(9, entity.getTimestamp());
        stmt.bindLong(10, entity.getBurn() ? 1L: 0L);
        stmt.bindLong(11, entity.getBurnsecond());
        stmt.bindLong(12, entity.getStatus());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(13, text);
        }
        stmt.bindLong(14, entity.getImageformat());
        stmt.bindLong(15, entity.getWidth());
        stmt.bindLong(16, entity.getHeight());
 
        String thumburl = entity.getThumburl();
        if (thumburl != null) {
            stmt.bindString(17, thumburl);
        }
 
        String localthumburl = entity.getLocalthumburl();
        if (localthumburl != null) {
            stmt.bindString(18, localthumburl);
        }
 
        String localurl = entity.getLocalurl();
        if (localurl != null) {
            stmt.bindString(19, localurl);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(20, url);
        }
        stmt.bindLong(21, entity.getSecond());
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(22, filename);
        }
        stmt.bindLong(23, entity.getSize());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(24, desc);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(25, latitude);
        }
 
        String longtitude = entity.getLongtitude();
        if (longtitude != null) {
            stmt.bindString(26, longtitude);
        }
        stmt.bindLong(27, entity.getUnread() ? 1L: 0L);
        stmt.bindLong(28, entity.getIsgroup() ? 1L: 0L);
        stmt.bindLong(29, entity.getDirect());
        stmt.bindLong(30, entity.getDownid());
 
        String localpath = entity.getLocalpath();
        if (localpath != null) {
            stmt.bindString(31, localpath);
        }
        stmt.bindLong(32, entity.getIslisten() ? 1L: 0L);
        stmt.bindLong(33, entity.getOrderId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MsgItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMsgid());
        stmt.bindLong(3, entity.getLocalid());
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(4, userid);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(5, fid);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(6, uid);
        }
        stmt.bindLong(7, entity.getChattype());
        stmt.bindLong(8, entity.getBussinesstype());
        stmt.bindLong(9, entity.getTimestamp());
        stmt.bindLong(10, entity.getBurn() ? 1L: 0L);
        stmt.bindLong(11, entity.getBurnsecond());
        stmt.bindLong(12, entity.getStatus());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(13, text);
        }
        stmt.bindLong(14, entity.getImageformat());
        stmt.bindLong(15, entity.getWidth());
        stmt.bindLong(16, entity.getHeight());
 
        String thumburl = entity.getThumburl();
        if (thumburl != null) {
            stmt.bindString(17, thumburl);
        }
 
        String localthumburl = entity.getLocalthumburl();
        if (localthumburl != null) {
            stmt.bindString(18, localthumburl);
        }
 
        String localurl = entity.getLocalurl();
        if (localurl != null) {
            stmt.bindString(19, localurl);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(20, url);
        }
        stmt.bindLong(21, entity.getSecond());
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(22, filename);
        }
        stmt.bindLong(23, entity.getSize());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(24, desc);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(25, latitude);
        }
 
        String longtitude = entity.getLongtitude();
        if (longtitude != null) {
            stmt.bindString(26, longtitude);
        }
        stmt.bindLong(27, entity.getUnread() ? 1L: 0L);
        stmt.bindLong(28, entity.getIsgroup() ? 1L: 0L);
        stmt.bindLong(29, entity.getDirect());
        stmt.bindLong(30, entity.getDownid());
 
        String localpath = entity.getLocalpath();
        if (localpath != null) {
            stmt.bindString(31, localpath);
        }
        stmt.bindLong(32, entity.getIslisten() ? 1L: 0L);
        stmt.bindLong(33, entity.getOrderId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MsgItem readEntity(Cursor cursor, int offset) {
        MsgItem entity = new MsgItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // msgid
            cursor.getLong(offset + 2), // localid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // uid
            cursor.getInt(offset + 6), // chattype
            cursor.getInt(offset + 7), // bussinesstype
            cursor.getLong(offset + 8), // timestamp
            cursor.getShort(offset + 9) != 0, // burn
            cursor.getInt(offset + 10), // burnsecond
            cursor.getInt(offset + 11), // status
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // text
            cursor.getInt(offset + 13), // imageformat
            cursor.getInt(offset + 14), // width
            cursor.getInt(offset + 15), // height
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // thumburl
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // localthumburl
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // localurl
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // url
            cursor.getInt(offset + 20), // second
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // filename
            cursor.getInt(offset + 22), // size
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // desc
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // latitude
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // longtitude
            cursor.getShort(offset + 26) != 0, // unread
            cursor.getShort(offset + 27) != 0, // isgroup
            cursor.getInt(offset + 28), // direct
            cursor.getLong(offset + 29), // downid
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // localpath
            cursor.getShort(offset + 31) != 0, // islisten
            cursor.getLong(offset + 32) // orderId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MsgItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgid(cursor.getLong(offset + 1));
        entity.setLocalid(cursor.getLong(offset + 2));
        entity.setUserid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChattype(cursor.getInt(offset + 6));
        entity.setBussinesstype(cursor.getInt(offset + 7));
        entity.setTimestamp(cursor.getLong(offset + 8));
        entity.setBurn(cursor.getShort(offset + 9) != 0);
        entity.setBurnsecond(cursor.getInt(offset + 10));
        entity.setStatus(cursor.getInt(offset + 11));
        entity.setText(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setImageformat(cursor.getInt(offset + 13));
        entity.setWidth(cursor.getInt(offset + 14));
        entity.setHeight(cursor.getInt(offset + 15));
        entity.setThumburl(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLocalthumburl(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLocalurl(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUrl(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSecond(cursor.getInt(offset + 20));
        entity.setFilename(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSize(cursor.getInt(offset + 22));
        entity.setDesc(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setLatitude(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setLongtitude(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setUnread(cursor.getShort(offset + 26) != 0);
        entity.setIsgroup(cursor.getShort(offset + 27) != 0);
        entity.setDirect(cursor.getInt(offset + 28));
        entity.setDownid(cursor.getLong(offset + 29));
        entity.setLocalpath(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setIslisten(cursor.getShort(offset + 31) != 0);
        entity.setOrderId(cursor.getLong(offset + 32));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MsgItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MsgItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MsgItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
