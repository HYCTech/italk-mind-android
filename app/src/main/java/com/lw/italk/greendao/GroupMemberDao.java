package com.lw.italk.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lw.italk.greendao.model.GroupMember;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_MEMBER".
*/
public class GroupMemberDao extends AbstractDao<GroupMember, Long> {

    public static final String TABLENAME = "GROUP_MEMBER";

    /**
     * Properties of entity GroupMember.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property Groupid = new Property(2, String.class, "groupid", false, "GROUPID");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
        public final static Property Timestamp = new Property(5, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Groupnickname = new Property(6, String.class, "groupnickname", false, "GROUPNICKNAME");
        public final static Property Disturb = new Property(7, boolean.class, "disturb", false, "DISTURB");
        public final static Property Msgsettop = new Property(8, boolean.class, "msgsettop", false, "MSGSETTOP");
        public final static Property Showname = new Property(9, boolean.class, "showname", false, "SHOWNAME");
    }


    public GroupMemberDao(DaoConfig config) {
        super(config);
    }
    
    public GroupMemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_MEMBER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERID\" TEXT," + // 1: userid
                "\"GROUPID\" TEXT," + // 2: groupid
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"IMAGE\" TEXT," + // 4: image
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 5: timestamp
                "\"GROUPNICKNAME\" TEXT," + // 6: groupnickname
                "\"DISTURB\" INTEGER NOT NULL ," + // 7: disturb
                "\"MSGSETTOP\" INTEGER NOT NULL ," + // 8: msgsettop
                "\"SHOWNAME\" INTEGER NOT NULL );"); // 9: showname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_MEMBER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupMember entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String groupid = entity.getGroupid();
        if (groupid != null) {
            stmt.bindString(3, groupid);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
        stmt.bindLong(6, entity.getTimestamp());
 
        String groupnickname = entity.getGroupnickname();
        if (groupnickname != null) {
            stmt.bindString(7, groupnickname);
        }
        stmt.bindLong(8, entity.getDisturb() ? 1L: 0L);
        stmt.bindLong(9, entity.getMsgsettop() ? 1L: 0L);
        stmt.bindLong(10, entity.getShowname() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupMember entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String groupid = entity.getGroupid();
        if (groupid != null) {
            stmt.bindString(3, groupid);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
        stmt.bindLong(6, entity.getTimestamp());
 
        String groupnickname = entity.getGroupnickname();
        if (groupnickname != null) {
            stmt.bindString(7, groupnickname);
        }
        stmt.bindLong(8, entity.getDisturb() ? 1L: 0L);
        stmt.bindLong(9, entity.getMsgsettop() ? 1L: 0L);
        stmt.bindLong(10, entity.getShowname() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroupMember readEntity(Cursor cursor, int offset) {
        GroupMember entity = new GroupMember( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // image
            cursor.getLong(offset + 5), // timestamp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // groupnickname
            cursor.getShort(offset + 7) != 0, // disturb
            cursor.getShort(offset + 8) != 0, // msgsettop
            cursor.getShort(offset + 9) != 0 // showname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupMember entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimestamp(cursor.getLong(offset + 5));
        entity.setGroupnickname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDisturb(cursor.getShort(offset + 7) != 0);
        entity.setMsgsettop(cursor.getShort(offset + 8) != 0);
        entity.setShowname(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupMember entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupMember entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupMember entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
