package com.lw.italk.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lw.italk.greendao.model.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Msgid = new Property(1, String.class, "msgid", false, "MSGID");
        public final static Property Msgtime = new Property(2, long.class, "msgtime", false, "MSGTIME");
        public final static Property Msgdir = new Property(3, long.class, "msgdir", false, "MSGDIR");
        public final static Property Isacked = new Property(4, long.class, "isacked", false, "ISACKED");
        public final static Property Isdelivered = new Property(5, long.class, "isdelivered", false, "ISDELIVERED");
        public final static Property Status = new Property(6, long.class, "status", false, "STATUS");
        public final static Property Participant = new Property(7, String.class, "participant", false, "PARTICIPANT");
        public final static Property Islistened = new Property(8, Long.class, "islistened", false, "ISLISTENED");
        public final static Property Msgbody = new Property(9, String.class, "msgbody", false, "MSGBODY");
        public final static Property Groupname = new Property(10, String.class, "groupname", false, "GROUPNAME");
    }


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"MSGID\" TEXT," + // 1: msgid
                "\"MSGTIME\" INTEGER NOT NULL ," + // 2: msgtime
                "\"MSGDIR\" INTEGER NOT NULL ," + // 3: msgdir
                "\"ISACKED\" INTEGER NOT NULL ," + // 4: isacked
                "\"ISDELIVERED\" INTEGER NOT NULL ," + // 5: isdelivered
                "\"STATUS\" INTEGER NOT NULL ," + // 6: status
                "\"PARTICIPANT\" TEXT NOT NULL ," + // 7: participant
                "\"ISLISTENED\" INTEGER," + // 8: islistened
                "\"MSGBODY\" TEXT NOT NULL ," + // 9: msgbody
                "\"GROUPNAME\" TEXT);"); // 10: groupname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String msgid = entity.getMsgid();
        if (msgid != null) {
            stmt.bindString(2, msgid);
        }
        stmt.bindLong(3, entity.getMsgtime());
        stmt.bindLong(4, entity.getMsgdir());
        stmt.bindLong(5, entity.getIsacked());
        stmt.bindLong(6, entity.getIsdelivered());
        stmt.bindLong(7, entity.getStatus());
        stmt.bindString(8, entity.getParticipant());
 
        Long islistened = entity.getIslistened();
        if (islistened != null) {
            stmt.bindLong(9, islistened);
        }
        stmt.bindString(10, entity.getMsgbody());
 
        String groupname = entity.getGroupname();
        if (groupname != null) {
            stmt.bindString(11, groupname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String msgid = entity.getMsgid();
        if (msgid != null) {
            stmt.bindString(2, msgid);
        }
        stmt.bindLong(3, entity.getMsgtime());
        stmt.bindLong(4, entity.getMsgdir());
        stmt.bindLong(5, entity.getIsacked());
        stmt.bindLong(6, entity.getIsdelivered());
        stmt.bindLong(7, entity.getStatus());
        stmt.bindString(8, entity.getParticipant());
 
        Long islistened = entity.getIslistened();
        if (islistened != null) {
            stmt.bindLong(9, islistened);
        }
        stmt.bindString(10, entity.getMsgbody());
 
        String groupname = entity.getGroupname();
        if (groupname != null) {
            stmt.bindString(11, groupname);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msgid
            cursor.getLong(offset + 2), // msgtime
            cursor.getLong(offset + 3), // msgdir
            cursor.getLong(offset + 4), // isacked
            cursor.getLong(offset + 5), // isdelivered
            cursor.getLong(offset + 6), // status
            cursor.getString(offset + 7), // participant
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // islistened
            cursor.getString(offset + 9), // msgbody
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // groupname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setMsgid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsgtime(cursor.getLong(offset + 2));
        entity.setMsgdir(cursor.getLong(offset + 3));
        entity.setIsacked(cursor.getLong(offset + 4));
        entity.setIsdelivered(cursor.getLong(offset + 5));
        entity.setStatus(cursor.getLong(offset + 6));
        entity.setParticipant(cursor.getString(offset + 7));
        entity.setIslistened(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setMsgbody(cursor.getString(offset + 9));
        entity.setGroupname(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Message entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
