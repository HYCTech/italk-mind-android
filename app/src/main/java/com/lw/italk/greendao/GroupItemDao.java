package com.lw.italk.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lw.italk.gson.group.GroupItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_ITEM".
*/
public class GroupItemDao extends AbstractDao<GroupItem, String> {

    public static final String TABLENAME = "GROUP_ITEM";

    /**
     * Properties of entity GroupItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Groupid = new Property(0, String.class, "groupid", true, "GROUPID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Faceurl = new Property(2, String.class, "faceurl", false, "FACEURL");
        public final static Property Local = new Property(3, long.class, "local", false, "LOCAL");
        public final static Property Jid = new Property(4, String.class, "jid", false, "JID");
    }


    public GroupItemDao(DaoConfig config) {
        super(config);
    }
    
    public GroupItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_ITEM\" (" + //
                "\"GROUPID\" TEXT PRIMARY KEY NOT NULL ," + // 0: groupid
                "\"NAME\" TEXT," + // 1: name
                "\"FACEURL\" TEXT," + // 2: faceurl
                "\"LOCAL\" INTEGER NOT NULL ," + // 3: local
                "\"JID\" TEXT);"); // 4: jid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupItem entity) {
        stmt.clearBindings();
 
        String groupid = entity.getGroupid();
        if (groupid != null) {
            stmt.bindString(1, groupid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String faceurl = entity.getFaceurl();
        if (faceurl != null) {
            stmt.bindString(3, faceurl);
        }
        stmt.bindLong(4, entity.getLocal());
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(5, jid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupItem entity) {
        stmt.clearBindings();
 
        String groupid = entity.getGroupid();
        if (groupid != null) {
            stmt.bindString(1, groupid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String faceurl = entity.getFaceurl();
        if (faceurl != null) {
            stmt.bindString(3, faceurl);
        }
        stmt.bindLong(4, entity.getLocal());
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(5, jid);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GroupItem readEntity(Cursor cursor, int offset) {
        GroupItem entity = new GroupItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // groupid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // faceurl
            cursor.getLong(offset + 3), // local
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // jid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupItem entity, int offset) {
        entity.setGroupid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFaceurl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocal(cursor.getLong(offset + 3));
        entity.setJid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GroupItem entity, long rowId) {
        return entity.getGroupid();
    }
    
    @Override
    public String getKey(GroupItem entity) {
        if(entity != null) {
            return entity.getGroupid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupItem entity) {
        return entity.getGroupid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
