package com.lw.italk.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lw.italk.greendao.model.Conversation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONVERSATION".
*/
public class ConversationDao extends AbstractDao<Conversation, String> {

    public static final String TABLENAME = "CONVERSATION";

    /**
     * Properties of entity Conversation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Localid = new Property(0, String.class, "localid", true, "LOCALID");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property UnreadMsgCount = new Property(2, int.class, "unreadMsgCount", false, "UNREAD_MSG_COUNT");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property IsGroup = new Property(4, boolean.class, "isGroup", false, "IS_GROUP");
        public final static Property Members = new Property(5, String.class, "members", false, "MEMBERS");
        public final static Property Timestamp = new Property(6, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Imgurl = new Property(7, String.class, "imgurl", false, "IMGURL");
        public final static Property Disturb = new Property(8, boolean.class, "disturb", false, "DISTURB");
        public final static Property Msgsettop = new Property(9, boolean.class, "msgsettop", false, "MSGSETTOP");
        public final static Property Showname = new Property(10, boolean.class, "showname", false, "SHOWNAME");
        public final static Property ReadBurn = new Property(11, boolean.class, "readBurn", false, "READ_BURN");
    }


    public ConversationDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONVERSATION\" (" + //
                "\"LOCALID\" TEXT PRIMARY KEY NOT NULL ," + // 0: localid
                "\"USERID\" TEXT," + // 1: userid
                "\"UNREAD_MSG_COUNT\" INTEGER NOT NULL ," + // 2: unreadMsgCount
                "\"USERNAME\" TEXT," + // 3: username
                "\"IS_GROUP\" INTEGER NOT NULL ," + // 4: isGroup
                "\"MEMBERS\" TEXT," + // 5: members
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 6: timestamp
                "\"IMGURL\" TEXT," + // 7: imgurl
                "\"DISTURB\" INTEGER NOT NULL ," + // 8: disturb
                "\"MSGSETTOP\" INTEGER NOT NULL ," + // 9: msgsettop
                "\"SHOWNAME\" INTEGER NOT NULL ," + // 10: showname
                "\"READ_BURN\" INTEGER NOT NULL );"); // 11: readBurn
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONVERSATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Conversation entity) {
        stmt.clearBindings();
 
        String localid = entity.getLocalid();
        if (localid != null) {
            stmt.bindString(1, localid);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
        stmt.bindLong(3, entity.getUnreadMsgCount());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
        stmt.bindLong(5, entity.getIsGroup() ? 1L: 0L);
 
        String members = entity.getMembers();
        if (members != null) {
            stmt.bindString(6, members);
        }
        stmt.bindLong(7, entity.getTimestamp());
 
        String imgurl = entity.getImgurl();
        if (imgurl != null) {
            stmt.bindString(8, imgurl);
        }
        stmt.bindLong(9, entity.getDisturb() ? 1L: 0L);
        stmt.bindLong(10, entity.getMsgsettop() ? 1L: 0L);
        stmt.bindLong(11, entity.getShowname() ? 1L: 0L);
        stmt.bindLong(12, entity.getReadBurn() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Conversation entity) {
        stmt.clearBindings();
 
        String localid = entity.getLocalid();
        if (localid != null) {
            stmt.bindString(1, localid);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
        stmt.bindLong(3, entity.getUnreadMsgCount());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
        stmt.bindLong(5, entity.getIsGroup() ? 1L: 0L);
 
        String members = entity.getMembers();
        if (members != null) {
            stmt.bindString(6, members);
        }
        stmt.bindLong(7, entity.getTimestamp());
 
        String imgurl = entity.getImgurl();
        if (imgurl != null) {
            stmt.bindString(8, imgurl);
        }
        stmt.bindLong(9, entity.getDisturb() ? 1L: 0L);
        stmt.bindLong(10, entity.getMsgsettop() ? 1L: 0L);
        stmt.bindLong(11, entity.getShowname() ? 1L: 0L);
        stmt.bindLong(12, entity.getReadBurn() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Conversation readEntity(Cursor cursor, int offset) {
        Conversation entity = new Conversation( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // localid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.getInt(offset + 2), // unreadMsgCount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.getShort(offset + 4) != 0, // isGroup
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // members
            cursor.getLong(offset + 6), // timestamp
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // imgurl
            cursor.getShort(offset + 8) != 0, // disturb
            cursor.getShort(offset + 9) != 0, // msgsettop
            cursor.getShort(offset + 10) != 0, // showname
            cursor.getShort(offset + 11) != 0 // readBurn
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Conversation entity, int offset) {
        entity.setLocalid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUnreadMsgCount(cursor.getInt(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsGroup(cursor.getShort(offset + 4) != 0);
        entity.setMembers(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimestamp(cursor.getLong(offset + 6));
        entity.setImgurl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDisturb(cursor.getShort(offset + 8) != 0);
        entity.setMsgsettop(cursor.getShort(offset + 9) != 0);
        entity.setShowname(cursor.getShort(offset + 10) != 0);
        entity.setReadBurn(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(Conversation entity, long rowId) {
        return entity.getLocalid();
    }
    
    @Override
    public String getKey(Conversation entity) {
        if(entity != null) {
            return entity.getLocalid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Conversation entity) {
        return entity.getLocalid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
