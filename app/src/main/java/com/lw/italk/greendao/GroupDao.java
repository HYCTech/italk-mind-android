package com.lw.italk.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lw.italk.greendao.model.Group;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP".
*/
public class GroupDao extends AbstractDao<Group, Void> {

    public static final String TABLENAME = "GROUP";

    /**
     * Properties of entity Group.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Jid = new Property(1, String.class, "jid", false, "JID");
        public final static Property Nick = new Property(2, String.class, "nick", false, "NICK");
        public final static Property Owner = new Property(3, String.class, "owner", false, "OWNER");
        public final static Property Modifiedtime = new Property(4, Long.class, "modifiedtime", false, "MODIFIEDTIME");
        public final static Property Ispublic = new Property(5, Long.class, "ispublic", false, "ISPUBLIC");
        public final static Property Desc = new Property(6, String.class, "desc", false, "DESC");
        public final static Property Members_size = new Property(7, Long.class, "members_size", false, "MEMBERS_SIZE");
        public final static Property Isblocked = new Property(8, Long.class, "isblocked", false, "ISBLOCKED");
        public final static Property Members = new Property(9, String.class, "members", false, "MEMBERS");
    }


    public GroupDao(DaoConfig config) {
        super(config);
    }
    
    public GroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"JID\" TEXT NOT NULL ," + // 1: jid
                "\"NICK\" TEXT NOT NULL ," + // 2: nick
                "\"OWNER\" TEXT NOT NULL ," + // 3: owner
                "\"MODIFIEDTIME\" INTEGER," + // 4: modifiedtime
                "\"ISPUBLIC\" INTEGER," + // 5: ispublic
                "\"DESC\" TEXT," + // 6: desc
                "\"MEMBERS_SIZE\" INTEGER," + // 7: members_size
                "\"ISBLOCKED\" INTEGER," + // 8: isblocked
                "\"MEMBERS\" TEXT);"); // 9: members
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Group entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindString(2, entity.getJid());
        stmt.bindString(3, entity.getNick());
        stmt.bindString(4, entity.getOwner());
 
        Long modifiedtime = entity.getModifiedtime();
        if (modifiedtime != null) {
            stmt.bindLong(5, modifiedtime);
        }
 
        Long ispublic = entity.getIspublic();
        if (ispublic != null) {
            stmt.bindLong(6, ispublic);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
 
        Long members_size = entity.getMembers_size();
        if (members_size != null) {
            stmt.bindLong(8, members_size);
        }
 
        Long isblocked = entity.getIsblocked();
        if (isblocked != null) {
            stmt.bindLong(9, isblocked);
        }
 
        String members = entity.getMembers();
        if (members != null) {
            stmt.bindString(10, members);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Group entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindString(2, entity.getJid());
        stmt.bindString(3, entity.getNick());
        stmt.bindString(4, entity.getOwner());
 
        Long modifiedtime = entity.getModifiedtime();
        if (modifiedtime != null) {
            stmt.bindLong(5, modifiedtime);
        }
 
        Long ispublic = entity.getIspublic();
        if (ispublic != null) {
            stmt.bindLong(6, ispublic);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
 
        Long members_size = entity.getMembers_size();
        if (members_size != null) {
            stmt.bindLong(8, members_size);
        }
 
        Long isblocked = entity.getIsblocked();
        if (isblocked != null) {
            stmt.bindLong(9, isblocked);
        }
 
        String members = entity.getMembers();
        if (members != null) {
            stmt.bindString(10, members);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Group readEntity(Cursor cursor, int offset) {
        Group entity = new Group( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.getString(offset + 1), // jid
            cursor.getString(offset + 2), // nick
            cursor.getString(offset + 3), // owner
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // modifiedtime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // ispublic
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // desc
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // members_size
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // isblocked
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // members
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Group entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setJid(cursor.getString(offset + 1));
        entity.setNick(cursor.getString(offset + 2));
        entity.setOwner(cursor.getString(offset + 3));
        entity.setModifiedtime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIspublic(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMembers_size(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setIsblocked(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setMembers(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Group entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Group entity) {
        return null;
    }

    @Override
    public boolean hasKey(Group entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
