package com.lw.italk.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lw.italk.greendao.model.Contact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT".
*/
public class ContactDao extends AbstractDao<Contact, String> {

    public static final String TABLENAME = "CONTACT";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, String.class, "uid", true, "UID");
        public final static Property Jid = new Property(1, String.class, "jid", false, "JID");
        public final static Property Timestampnow = new Property(2, Long.class, "timestampnow", false, "TIMESTAMPNOW");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Remark = new Property(4, String.class, "remark", false, "REMARK");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");
        public final static Property Localimage = new Property(6, String.class, "localimage", false, "LOCALIMAGE");
        public final static Property Mobile = new Property(7, String.class, "mobile", false, "MOBILE");
        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
    }


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT\" (" + //
                "\"UID\" TEXT PRIMARY KEY NOT NULL ," + // 0: uid
                "\"JID\" TEXT," + // 1: jid
                "\"TIMESTAMPNOW\" INTEGER," + // 2: timestampnow
                "\"USERNAME\" TEXT," + // 3: username
                "\"REMARK\" TEXT," + // 4: remark
                "\"AVATAR\" TEXT," + // 5: avatar
                "\"LOCALIMAGE\" TEXT," + // 6: localimage
                "\"MOBILE\" TEXT," + // 7: mobile
                "\"EMAIL\" TEXT);"); // 8: email
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(2, jid);
        }
 
        Long timestampnow = entity.getTimestampnow();
        if (timestampnow != null) {
            stmt.bindLong(3, timestampnow);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(5, remark);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String localimage = entity.getLocalimage();
        if (localimage != null) {
            stmt.bindString(7, localimage);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(8, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(2, jid);
        }
 
        Long timestampnow = entity.getTimestampnow();
        if (timestampnow != null) {
            stmt.bindLong(3, timestampnow);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(5, remark);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String localimage = entity.getLocalimage();
        if (localimage != null) {
            stmt.bindString(7, localimage);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(8, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // jid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // timestampnow
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remark
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // localimage
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mobile
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // email
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setJid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimestampnow(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLocalimage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMobile(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Contact entity, long rowId) {
        return entity.getUid();
    }
    
    @Override
    public String getKey(Contact entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Contact entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
