package com.lw.italk.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lw.italk.greendao.model.RequestTime;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REQUEST_TIME".
*/
public class RequestTimeDao extends AbstractDao<RequestTime, String> {

    public static final String TABLENAME = "REQUEST_TIME";

    /**
     * Properties of entity RequestTime.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Userid = new Property(0, String.class, "userid", true, "USERID");
        public final static Property Timestampnow = new Property(1, long.class, "timestampnow", false, "TIMESTAMPNOW");
        public final static Property Blacklisttime = new Property(2, long.class, "blacklisttime", false, "BLACKLISTTIME");
        public final static Property Grouplisttime = new Property(3, long.class, "grouplisttime", false, "GROUPLISTTIME");
        public final static Property Msglisttime = new Property(4, long.class, "msglisttime", false, "MSGLISTTIME");
        public final static Property Groupmembertime = new Property(5, long.class, "groupmembertime", false, "GROUPMEMBERTIME");
        public final static Property Lastmsg_sendId = new Property(6, long.class, "lastmsg_sendId", false, "LASTMSG_SEND_ID");
        public final static Property Lastmsg_sendType = new Property(7, int.class, "lastmsg_sendType", false, "LASTMSG_SEND_TYPE");
    }


    public RequestTimeDao(DaoConfig config) {
        super(config);
    }
    
    public RequestTimeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REQUEST_TIME\" (" + //
                "\"USERID\" TEXT PRIMARY KEY NOT NULL ," + // 0: userid
                "\"TIMESTAMPNOW\" INTEGER NOT NULL ," + // 1: timestampnow
                "\"BLACKLISTTIME\" INTEGER NOT NULL ," + // 2: blacklisttime
                "\"GROUPLISTTIME\" INTEGER NOT NULL ," + // 3: grouplisttime
                "\"MSGLISTTIME\" INTEGER NOT NULL ," + // 4: msglisttime
                "\"GROUPMEMBERTIME\" INTEGER NOT NULL ," + // 5: groupmembertime
                "\"LASTMSG_SEND_ID\" INTEGER NOT NULL ," + // 6: lastmsg_sendId
                "\"LASTMSG_SEND_TYPE\" INTEGER NOT NULL );"); // 7: lastmsg_sendType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REQUEST_TIME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RequestTime entity) {
        stmt.clearBindings();
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(1, userid);
        }
        stmt.bindLong(2, entity.getTimestampnow());
        stmt.bindLong(3, entity.getBlacklisttime());
        stmt.bindLong(4, entity.getGrouplisttime());
        stmt.bindLong(5, entity.getMsglisttime());
        stmt.bindLong(6, entity.getGroupmembertime());
        stmt.bindLong(7, entity.getLastmsg_sendId());
        stmt.bindLong(8, entity.getLastmsg_sendType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RequestTime entity) {
        stmt.clearBindings();
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(1, userid);
        }
        stmt.bindLong(2, entity.getTimestampnow());
        stmt.bindLong(3, entity.getBlacklisttime());
        stmt.bindLong(4, entity.getGrouplisttime());
        stmt.bindLong(5, entity.getMsglisttime());
        stmt.bindLong(6, entity.getGroupmembertime());
        stmt.bindLong(7, entity.getLastmsg_sendId());
        stmt.bindLong(8, entity.getLastmsg_sendType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public RequestTime readEntity(Cursor cursor, int offset) {
        RequestTime entity = new RequestTime( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userid
            cursor.getLong(offset + 1), // timestampnow
            cursor.getLong(offset + 2), // blacklisttime
            cursor.getLong(offset + 3), // grouplisttime
            cursor.getLong(offset + 4), // msglisttime
            cursor.getLong(offset + 5), // groupmembertime
            cursor.getLong(offset + 6), // lastmsg_sendId
            cursor.getInt(offset + 7) // lastmsg_sendType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RequestTime entity, int offset) {
        entity.setUserid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTimestampnow(cursor.getLong(offset + 1));
        entity.setBlacklisttime(cursor.getLong(offset + 2));
        entity.setGrouplisttime(cursor.getLong(offset + 3));
        entity.setMsglisttime(cursor.getLong(offset + 4));
        entity.setGroupmembertime(cursor.getLong(offset + 5));
        entity.setLastmsg_sendId(cursor.getLong(offset + 6));
        entity.setLastmsg_sendType(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(RequestTime entity, long rowId) {
        return entity.getUserid();
    }
    
    @Override
    public String getKey(RequestTime entity) {
        if(entity != null) {
            return entity.getUserid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RequestTime entity) {
        return entity.getUserid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
