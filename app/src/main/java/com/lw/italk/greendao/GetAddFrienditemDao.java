package com.lw.italk.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lw.italk.gson.friend.GetAddFrienditem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GET_ADD_FRIENDITEM".
*/
public class GetAddFrienditemDao extends AbstractDao<GetAddFrienditem, Long> {

    public static final String TABLENAME = "GET_ADD_FRIENDITEM";

    /**
     * Properties of entity GetAddFrienditem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property RemarkInfo = new Property(3, String.class, "remarkInfo", false, "REMARK_INFO");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "AVATAR");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
        public final static Property FollowAuthId = new Property(6, String.class, "followAuthId", false, "FOLLOW_AUTH_ID");
    }


    public GetAddFrienditemDao(DaoConfig config) {
        super(config);
    }
    
    public GetAddFrienditemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GET_ADD_FRIENDITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERID\" TEXT," + // 1: userid
                "\"NICKNAME\" TEXT," + // 2: nickname
                "\"REMARK_INFO\" TEXT," + // 3: remarkInfo
                "\"AVATAR\" TEXT," + // 4: avatar
                "\"STATUS\" INTEGER NOT NULL ," + // 5: status
                "\"FOLLOW_AUTH_ID\" TEXT);"); // 6: followAuthId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GET_ADD_FRIENDITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GetAddFrienditem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String remarkInfo = entity.getRemarkInfo();
        if (remarkInfo != null) {
            stmt.bindString(4, remarkInfo);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
        stmt.bindLong(6, entity.getStatus());
 
        String followAuthId = entity.getFollowAuthId();
        if (followAuthId != null) {
            stmt.bindString(7, followAuthId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GetAddFrienditem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String remarkInfo = entity.getRemarkInfo();
        if (remarkInfo != null) {
            stmt.bindString(4, remarkInfo);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
        stmt.bindLong(6, entity.getStatus());
 
        String followAuthId = entity.getFollowAuthId();
        if (followAuthId != null) {
            stmt.bindString(7, followAuthId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GetAddFrienditem readEntity(Cursor cursor, int offset) {
        GetAddFrienditem entity = new GetAddFrienditem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remarkInfo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar
            cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // followAuthId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GetAddFrienditem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemarkInfo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setFollowAuthId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GetAddFrienditem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GetAddFrienditem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GetAddFrienditem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
